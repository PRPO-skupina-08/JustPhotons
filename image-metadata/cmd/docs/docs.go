// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/metadata": {
            "get": {
                "description": "Retrieves many metadata entries based on its query parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Get many Metadata entries",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 20,
                        "description": "Maximum amount of returned entries (\u003e0). To be used with ` + "`" + `offset` + "`" + ` in order to achieve pagination.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "Amount of entries left out at the start. To be used with ` + "`" + `limit` + "`" + ` in order to achieve pagination.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "rating:asc,image_id:desc",
                        "description": "SQL sorting in with pattern ` + "`" + `\u003cfield\u003e:\u003corder\u003e[,]...` + "`" + `, first pattern does primary sort, second pattern secondary sort etc.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 42,
                        "description": "The ID of the image to which the metadata entry belongs.",
                        "name": "image_id",
                        "in": "query"
                    },
                    {
                        "maximum": 5,
                        "minimum": 0,
                        "type": "integer",
                        "example": 4,
                        "description": "Image rating, between 1 and 5 (inclusive)",
                        "name": "rating",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 42,
                        "description": "The ID of the album to which the image belongs",
                        "name": "album_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matching entry",
                        "schema": {
                            "$ref": "#/definitions/types.SwaggerMetadata"
                        }
                    },
                    "400": {
                        "description": "Incorrect input",
                        "schema": {}
                    },
                    "404": {
                        "description": "No results",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Creates a new metadata entry in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Insert/create a new Metadata entry",
                "parameters": [
                    {
                        "description": "Insert metadata payload",
                        "name": "metadata",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InsertMetadataPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created new entry",
                        "schema": {
                            "$ref": "#/definitions/types.SwaggerMetadata"
                        }
                    },
                    "400": {
                        "description": "Incorrect input (missing fields, incorrect data etc.)",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error, but can be caused by database rejecting wrong data (would be a developer's mistake).",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Deletes many metadata entries based on its query parameters. **At least one paramater must be present!**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Delete many Metadata entries",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 42,
                        "description": "Image ID (not the metadata entry's ID)",
                        "name": "image_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 4,
                        "description": "Image rating, between 1 and 5 (inclusive)",
                        "name": "rating",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 4,
                        "description": "Image ID",
                        "name": "album_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Sucessfully deleted"
                    },
                    "400": {
                        "description": "Neither ` + "`" + `image_id` + "`" + ` nor ` + "`" + `rating` + "`" + ` specified, but at least one is needed",
                        "schema": {}
                    },
                    "404": {
                        "description": "No results",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/metadata/{id}": {
            "get": {
                "description": "Retrieves a specific metadata entry based on its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Get single Metadata entry",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 42,
                        "description": "Metadata entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matching entry",
                        "schema": {
                            "$ref": "#/definitions/types.SwaggerMetadata"
                        }
                    },
                    "400": {
                        "description": "Incorrect input",
                        "schema": {}
                    },
                    "404": {
                        "description": "No results",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific metadata entry based on its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metadata"
                ],
                "summary": "Delete a single Metadata entry",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 42,
                        "description": "Metadata entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Sucessfully deleted"
                    },
                    "400": {
                        "description": "Incorrect input",
                        "schema": {}
                    },
                    "404": {
                        "description": "Nothing to delete",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "types.InsertMetadataPayload": {
            "type": "object",
            "properties": {
                "album_id": {
                    "type": "integer"
                },
                "image_id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                }
            }
        },
        "types.SwaggerMetadata": {
            "type": "object",
            "properties": {
                "albumId": {
                    "type": "integer"
                },
                "imageId": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Swagger Image Metadata API",
	Description:      "This is a microservice for managing images' metadata",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
